name: NDK build

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - "version-*"
  pull_request:
    branches-ignore:
      - "version-*"

env:
  module_id: flamingo
  cache-name: flamingo_cache
  qmodName: flamingo

jobs:
  test-local:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: true

      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      # Get QPM so we can bring in dependencies
      - name: QPM Rust Action
        uses: Fernthedev/qpm-action@v1
        with:
          #required
          workflow_token: ${{secrets.GITHUB_TOKEN}}

          restore: true # will run restore on download
          cache: true #will cache dependencies

      - name: QPM Collapse
        run: qpm-rust collapse

      # Get the CORRECT version of capstone
      - name: Get Capstone
        run: pip install capstone==5.0.1 -U --user

      - name: General info
        run: |
          python3 --version
          ls ~/.local/lib/python3.8/site-packages/capstone/include

      - name: Build simple test
        run: |
          clang++ test/main.cpp src/fixups.cpp src/page-allocator.cpp -o build-linux/test -std=c++20 -Ishared -I$(realpath ~/.local/lib/python3.8/site-packages/capstone/include) -l:libcapstone.a -Iextern/includes/fmt/fmt/include -L$(realpath ~/.local/lib/python3.8/site-packages/capstone/lib) -DFMT_HEADER_ONLY -Wall -Wextra -Werror -g
      
      # Run the test to ensure validity
      - name: Run simple test
        run: ./build-linux/test &> ./build-linux/test-output.txt

      # Upload test artifact
      - name: Upload test artifact
        uses: actions/upload-artifact@v2
        with:
          name: test_output.txt
          path: ./build-linux/test-output.txt
          if-no-files-found: error
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: true
          lfs: true

      - uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Create ndkpath.txt
        run: |
          echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt
          cat ${GITHUB_WORKSPACE}/ndkpath.txt

      - name: QPM Rust Action
        uses: Fernthedev/qpm-rust-action@main
        with:
          #required
          workflow_token: ${{secrets.GITHUB_TOKEN}}

          restore: true # will run restore on download
          cache: true #will cache dependencies

          # Name of qmod in release asset. Assumes exists, same as prior
          qpm_qmod: ${{env.qmodName}}.qmod

      - name: QPM Collapse
        run: qpm-rust collapse

      - name: Build
        run: |
          cd ${GITHUB_WORKSPACE}
          qpm-rust s build

      - name: Create Qmod
        run: |
          qpm-rust qmod build
          pwsh -Command ./createqmod.ps1 ${{env.qmodName}}

      - name: Get Library Name
        id: libname
        run: |
          cd ./build/
          pattern="lib${module_id}*.so"
          files=( $pattern )
          echo ::set-output name=NAME::"${files[0]}"

      - name: Upload non-debug artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.libname.outputs.NAME }}
          path: ./build/${{ steps.libname.outputs.NAME }}
          if-no-files-found: error

      - name: Upload debug artifact
        uses: actions/upload-artifact@v2
        with:
          name: debug_${{ steps.libname.outputs.NAME }}
          path: ./build/debug_${{ steps.libname.outputs.NAME }}
          if-no-files-found: error

      - name: Upload qmod artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.qmodName}}.qmod
          path: ./${{ env.qmodName }}.qmod
          if-no-files-found: error
